/*
** Test SmoothSort.mjv (Tri progressif)
**
** E.W. Dijkstra "EWD796a" 1981
**  Sorts an array of keys in place...
**
**  Worst case     : 0(n*ln(n))
**  Already sorted : 0(n)
**
**************************************
**
*/

public class SmoothSort
{
  static int n, p, q, r, b, c, r1, b1, c1;
  static int[] m;

  static public void main()
  {
      rd();

      if ( n > 0 )
      {
        wr();
        printstr( "Sorting..." ); smoothsort(); println();
        wr();
      }
  }

  static void smoothsort()
  {
    q = 1; r = 0; p = 1; b = 1; c = 1; /* P3' && P4' */

      while ( q != n )
      {
        r1 = r;

        if ( ( p % 8 ) == 3 )
        {
          b1 = b; c1 = c; sift();
          p = ( p + 1 ) / 4; up(); up(); /* cf. p. 10 */
        }
        else /* ( ( p % 4 ) == 1 ) */
        {
          if ( ( q + c ) < n )
          {
            b1 = b; c1 = c; sift();
          }
          else /* ( q + c ) >= n */
            trinkle();

          down();
          p = 2 * p;
          while ( b != 1 ) { down(); p = 2 * p; }
          p = p + 1; /* cf. p. 10 */
        }

        q = q + 1;
        r = r + 1;

      } /* P3' && P4' */

      r1 = r;
      trinkle(); /* P3 && P4 */

      while ( q != 1 )
      {
        q = q - 1;

        if ( b == 1 )
        {
          r = r - 1;
          p = p - 1;
          while ( even( p ) ) { p = p / 2; up(); }
        }
        else /* b >= 3 */
        {
          p = p - 1;
          r = r - b + c;
          if ( p > 0 ) semitrinkle();
          down(); p = 2 * p + 1;
          r = r + c; semitrinkle();
          down(); p = 2 * p + 1;
        }
      }
  }

  /* ------------------------------------------------------ */

  static void sift()
  {
    int r2;

      while ( ! ( b1 < 3 ) )
      {
        r2 = r1 - b1 + c1;

        if ( m[r2] < m[r1 - 1] )
        {
          r2 = r1 - 1;
          down1();
        }

        if ( ! ( m[r1] < m[r2] ) )
          b1 = 1; /* break; */
        else /* m[r1] < m[r2] */
        {
          swap( r1, r2 );
          r1 = r2;
          down1();
        }
      }
  }

  static void trinkle()
  {
    int p1, r2, r3;

      p1 = p;
      b1 = b;
      c1 = c;

      while ( p1 > 0 )
      {

        while ( even( p1 ) )
        {
          p1 = p1 / 2;
          up1();
        }
        r3 = r1 - b1;

        if ( ( p1 == 1 ) || ( ! ( m[r3] > m[r1] ) ) )
          p1 = 0; /* break; */
        else /* ( ( p1 > 1 ) && ( m[r3] > m[r1] ) ) */
        {
          p1 = ( p1 / 2 ) * 2;

          if ( b1 == 1 )
          {
            swap( r1, r3 );
            r1 = r3;
          }
          else /* b1 >= 3 */
          {
            r2 = r1 - b1 + c1;

            if ( m[r2] < m[r1 - 1] )
            {
              r2 = r1 - 1;
              down1();
              p1 = p1 * 2;
            }

            if ( ! ( m[r3] < m[r2] ) )
            {
              swap( r1, r3 );
              r1 = r3;
            }
            else
            {
              swap( r1, r2 );
              r1 = r2;
              down1();
              p1 = 0; /* break; */
            }

          } /* end if ( b1 == 1 ) */
        }

      } /* end while ( p1 > 0 ) */

      sift();
  }

  static void semitrinkle()
  {
      r1 = r - c;

      if ( m[r1] > m[r] )
      {
        swap( r, r1 );
        trinkle();
      }
  }

  /* ------------------------------------------------------ */

  static void up()
  {
    bc( b + c + 1, b );
  }

  static void up1()
  {
    b1c1( b1 + c1 + 1, b1 );
  }

  static void down()
  {
    bc( c, b - c - 1 );
  }

  static void down1()
  {
    b1c1( c1, b1 - c1 - 1 );
  }

  static void bc( int newb, int newc )
  {
    b = newb;
    c = newc;
  }

  static void b1c1( int newb1, int newc1 )
  {
    b1 = newb1;
    c1 = newc1;
  }

  static void swap( int i, int j )
  {
    int t;

      t    = m[i];
      m[i] = m[j];
      m[j] = t;
  }

  static boolean even( int i )
  {
    return ( ( i % 2 ) == 0 );
  }

  /* ------------------------------------------------------ */

  static void rd()
  {
    int i;

      printstr( "Reading data set... " ); println();

      read( n );

      if ( n > 0 )
      {
        m = new int[n];

        i = 0;
        while ( i < n )
        {
          read( m[i] );
          i = i + 1;
        }
      }

      print( n ); printstr( " items read. " ); println();
  }

  static void wr()
  {
    int i;

      printstr( "Writing data set... " ); println();

      i = 0;
      while ( i < n )
      {
        print( m[i] ); println();
        i = i + 1;
      }
  }

}
