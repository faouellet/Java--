/*
** Test NPRtnValue.mjv
**
** To test expressions in return Statements.
**
** All combinations of expressions for Arguments are tested in
** NPArgs.mjv, and for rValue of Expressions in NPExpr.mjv, so
** it only remains to test that the return Statements correctly
** use expression evaluation.
*/

public class NPRtnValue
{
  static public void main()
  {

   printstr( "print( i_add( 1, 2 ) ); => " ); print( i_add( 1, 2 ) ); println();
   printstr( "print( i_sub( 11, 34 ) ); => " ); print( i_sub( 11, 34 ) ); println();
   printstr( "print( i_mul( 10, 8 ) ); => " ); print( i_mul( 10, 8 ) ); println();
   printstr( "print( i_div( 80, 10 ) ); => " ); print( i_div( 80, 10 ) ); println();
   printstr( "print( i_rem( 83, 10 ) ); => " ); print( i_rem( 83, 10 ) ); println();

   printstr( "print( f_add( 1, 2 ) ); => " ); print( f_add( 1, 2 ) ); println();
   printstr( "print( f_sub( 11, 34 ) ); => " ); print( f_sub( 11, 34 ) ); println();
   printstr( "print( f_mul( 10, 8 ) ); => " ); print( f_mul( 10, 8 ) ); println();
   printstr( "print( f_div( 80, 10 ) ); => " ); print( f_div( 80, 10 ) ); println();
   printstr( "print( f_rem( 83, 10 ) ); => " ); print( f_rem( 83, 10 ) ); println();

   printstr( "print( f_add( 1.0f, 2.0f ) ); => " ); print( f_add( 1.0f, 2.0f ) ); println();
   printstr( "print( f_sub( 11.0f, 34.0f ) ); => " ); print( f_sub( 11.0f, 34.0f ) ); println();
   printstr( "print( f_mul( 10.0f, 8.0f ) ); => " ); print( f_mul( 10.0f, 8.0f ) ); println();
   printstr( "print( f_div( 80.0f, 10.0f ) ); => " ); print( f_div( 80.0f, 10.0f ) ); println();
   printstr( "print( f_rem( 83.0f, 10.0f ) ); => " ); print( f_rem( 83.0f, 10.0f ) ); println();

    return;
  }

  static int i_add( int i, int j )
  {
    return i + j;
  }

  static int i_sub( int i, int j )
  {
    return i - j;
  }

  static int i_mul( int i, int j )
  {
    return i * j;
  }

  static int i_div( int i, int j )
  {
    return i / j;
  }

  static int i_rem( int i, int j )
  {
    return i % j;
  }

  static float f_add( float e, float f )
  {
    return e + f;
  }

  static float f_sub( float e, float f )
  {
    return e - f;
  }

  static float f_mul( float e, float f )
  {
    return e * f;
  }

  static float f_div( float e, float f )
  {
    return e / f;
  }

  static float f_rem( float e, float f )
  {
    return e % f;
  }

}
